{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/DAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface ICryptoDevs {\r\n    function balanceOf(address owner) external view returns(uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n    external view returns(uint256);\r\n}\r\n\r\ninterface IFakeNFTMarketplace {\r\n    /// @dev getPrice() returns the price of an NFT from the FakeNFTMarketplace\r\n    /// @return Returns the price in Wei for an NFT\r\n    function getPrice() external view returns (uint256);\r\n\r\n    /// @dev available() returns whether or not the given _tokenId has already been purchased\r\n    /// @return Returns a boolean value - true if available, false if not\r\n    function available(uint256 _tokenId) external view returns (bool);\r\n\r\n    /// @dev purchase() purchases an NFT from the FakeNFTMarketplace\r\n    /// @param _tokenId - the fake NFT tokenID to purchase\r\n    function purchase(uint256 _tokenId) external payable;\r\n}\r\n\r\nerror DAO__NOT_DAO_MEMBER();\r\nerror DAO__TOKEN_NOT_AVAILABLe();\r\nerror DAO__DEADLINE_EXCEEDED();\r\nerror DAO__ALREADY_VOTED();\r\nerror DAO_DEADLINE_NOT_EXCEEDED();\r\nerror DAO_ALREADY_EXCECUTED();\r\nerror DAO_NOT_ENOUGH_ETH();\r\n\r\ncontract DAO is Ownable{\r\n\r\n    ICryptoDevs cryptodevs;     \r\n    IFakeNFTMarketplace nftMarket;\r\n\r\n    struct Proposal {\r\n        uint256 nftTokenId;\r\n        uint256 deadline;\r\n        uint256 yayVotes;\r\n        uint256 nayVotes;\r\n        bool executed;\r\n\r\n        mapping(uint256 => bool) voters;\r\n    }\r\n    \r\n    mapping(uint256 => Proposal) public proposals;\r\n    uint256 public numProposals;\r\n\r\n    enum Vote{\r\n        YAY,\r\n        NAY\r\n    }\r\n\r\n    constructor(address _cryptoDevsAddress, address _fakeNftMarketaddress) Ownable(msg.sender){\r\n        cryptodevs = ICryptoDevs(_cryptoDevsAddress);    \r\n        nftMarket = IFakeNFTMarketplace(_fakeNftMarketaddress);\r\n    }\r\n    \r\n    modifier nftHolderOnly(){\r\n        if(cryptodevs.balanceOf(msg.sender) < 1){\r\n            revert DAO__NOT_DAO_MEMBER();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier activeProposalOnly(uint256 _idx){\r\n        if(block.timestamp >= proposals[_idx].deadline){\r\n            revert DAO__DEADLINE_EXCEEDED();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier inActiveProposalOnly(uint256 _idx){\r\n        if(block.timestamp < proposals[_idx].deadline){\r\n            revert DAO_DEADLINE_NOT_EXCEEDED();\r\n        }\r\n        if(proposals[_idx].executed == true){\r\n            revert DAO_ALREADY_EXCECUTED();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function createProposal(uint256 _nftTokenId) public nftHolderOnly returns(uint256) {\r\n        if(!nftMarket.available(_nftTokenId)){\r\n            revert DAO__TOKEN_NOT_AVAILABLe();\r\n        }\r\n\r\n        Proposal storage proposal = proposals[numProposals];\r\n        \r\n        proposal.nftTokenId = _nftTokenId;\r\n        proposal.deadline = block.timestamp + 10 minutes;\r\n        \r\n        numProposals++;\r\n\r\n        return numProposals - 1;\r\n    }\r\n\r\n    function voteOnProposal(uint256 _idx, Vote vote) \r\n    public nftHolderOnly activeProposalOnly(_idx) {\r\n        Proposal storage proposal = proposals[_idx];\r\n\r\n        uint256 voterNFTBalance = cryptodevs.balanceOf(msg.sender);\r\n        uint256 numVotes = 0;\r\n\r\n        for(uint256 i = 0; i<voterNFTBalance; i++){\r\n            uint256 tokenId = cryptodevs.tokenOfOwnerByIndex(msg.sender, i);\r\n            if(proposal.voters[tokenId] == false){\r\n                numVotes++;\r\n                proposal.voters[tokenId] = true;\r\n            }\r\n        }\r\n\r\n        if(numVotes == 0){\r\n            revert DAO__ALREADY_VOTED();\r\n        }\r\n\r\n        if(vote == Vote.YAY){\r\n            proposal.yayVotes += numVotes;\r\n        }else {\r\n            proposal.nayVotes += numVotes;\r\n        }\r\n    }\r\n     \r\n    function executeProposal(uint256 _idx) \r\n    public nftHolderOnly onlyOwner inActiveProposalOnly(_idx){\r\n      Proposal storage proposal = proposals[_idx];\r\n\r\n      if(proposal.yayVotes > proposal.nayVotes){\r\n        uint256 nftPrice = nftMarket.getPrice();\r\n        if(address(this).balance < nftPrice){\r\n            revert DAO_NOT_ENOUGH_ETH();\r\n        }\r\n        nftMarket.purchase{value : nftPrice}(proposal.nftTokenId);\r\n      }\r\n      proposal.executed = true;\r\n    } \r\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}