{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function _preventExecution() internal view {\n    // solhint-disable-next-line avoid-tx-origin\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    _preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AutomationBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/DAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {AutomationCompatibleInterface} from \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\r\n\r\ninterface ICryptoDevs {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(\r\n        address owner,\r\n        uint256 index\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IFakeNFTMarketplace {\r\n    function getPrice() external view returns (uint256);\r\n\r\n    function available(uint256 _tokenId) external view returns (bool);\r\n\r\n    function purchase(uint256 _tokenId) external payable;\r\n}\r\n\r\nerror DAO__NOT_DAO_MEMBER();\r\nerror DAO__TOKEN_NOT_AVAILABLE();\r\nerror DAO__DEADLINE_EXCEEDED();\r\nerror DAO__ALREADY_VOTED();\r\nerror DAO_DEADLINE_NOT_EXCEEDED();\r\nerror DAO_ALREADY_EXCECUTED();\r\nerror DAO_NOT_ENOUGH_ETH();\r\nerror DAO_PropoalAlreadyRunning();\r\nerror DAO__NO_NFT_BALANCE();\r\n\r\ncontract DAO is Ownable, AutomationCompatibleInterface {\r\n    ICryptoDevs cryptodevs;\r\n    IFakeNFTMarketplace nftMarket;\r\n    enum Vote {\r\n        YAY,\r\n        NAY\r\n    }\r\n\r\n    event ProposalCreated(uint256 indexed proposalID);\r\n    event ProposalEnded(uint256 indexed proposalID, bool indexed result);\r\n    event VoteSubmitted(\r\n        uint256 indexed proposalID,\r\n        address indexed voter,\r\n        Vote indexed vote\r\n    ); //include the vote\r\n\r\n    struct Proposal {\r\n        uint256 nftTokenId;\r\n        uint256 deadline;\r\n        uint256 yayVotes;\r\n        uint256 nayVotes;\r\n        bool executed;\r\n        mapping(address => bool) voters;\r\n    }\r\n\r\n    mapping(uint256 => Proposal) public proposals;\r\n    uint256 public numProposals;\r\n    bool public proposalRunning;\r\n\r\n    constructor(\r\n        address _cryptoDevsAddress,\r\n        address _fakeNftMarketaddress\r\n    ) Ownable(msg.sender) {\r\n        cryptodevs = ICryptoDevs(_cryptoDevsAddress);\r\n        nftMarket = IFakeNFTMarketplace(_fakeNftMarketaddress);\r\n    }\r\n\r\n    modifier nftHolderOnly() {\r\n        if (cryptodevs.balanceOf(msg.sender) < 1) {\r\n            revert DAO__NOT_DAO_MEMBER();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier activeProposalOnly(uint256 _idx) {\r\n        if (proposals[_idx].executed) {\r\n            revert DAO__DEADLINE_EXCEEDED();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier proposalAlreadyRunning() {\r\n        if (proposalRunning) {\r\n            revert DAO_PropoalAlreadyRunning();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function createProposal(\r\n        uint256 _nftTokenId,\r\n        uint256 _deadline\r\n    ) public nftHolderOnly proposalAlreadyRunning returns (uint256) {\r\n        if (!nftMarket.available(_nftTokenId)) {\r\n            revert DAO__TOKEN_NOT_AVAILABLE();\r\n        }\r\n\r\n        Proposal storage proposal = proposals[numProposals];\r\n\r\n        proposal.nftTokenId = _nftTokenId;\r\n        proposal.deadline = block.timestamp + _deadline;\r\n        numProposals++;\r\n        emit ProposalCreated(numProposals - 1);\r\n        return numProposals - 1;\r\n    }\r\n\r\n    function voteOnProposal(\r\n        uint256 _idx,\r\n        Vote vote\r\n    ) public nftHolderOnly activeProposalOnly(_idx) {\r\n        Proposal storage proposal = proposals[_idx];\r\n\r\n        if (proposal.voters[msg.sender]) {\r\n            revert DAO__ALREADY_VOTED();\r\n        }\r\n\r\n        uint256 voterNFTBalance = cryptodevs.balanceOf(msg.sender);\r\n\r\n        require(voterNFTBalance > 0, \"Not enough balance\");\r\n\r\n        if (vote == Vote.YAY) {\r\n            proposal.yayVotes += voterNFTBalance;\r\n        } else {\r\n            proposal.nayVotes += voterNFTBalance;\r\n        }\r\n        proposal.voters[msg.sender] = true;\r\n        emit VoteSubmitted(_idx, msg.sender, vote);\r\n    }\r\n\r\n    function executeProposal(uint256 _idx) public nftHolderOnly onlyOwner {\r\n        Proposal storage proposal = proposals[_idx];\r\n        if (block.timestamp >= proposal.deadline) {\r\n            bool result = proposal.yayVotes > proposal.nayVotes;\r\n            if (result) {\r\n                uint256 nftPrice = nftMarket.getPrice();\r\n                if (address(this).balance < nftPrice) {\r\n                    revert DAO_NOT_ENOUGH_ETH();\r\n                }\r\n                nftMarket.purchase{value: nftPrice}(proposal.nftTokenId);\r\n            }\r\n            proposal.executed = true;\r\n            emit ProposalEnded(_idx, result);\r\n        }\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory /* performData */)\r\n    {\r\n        if (numProposals == 0) {\r\n            return (false, \"\");\r\n        }\r\n        Proposal storage proposal = proposals[numProposals - 1];\r\n        upkeepNeeded =\r\n            !proposal.executed &&\r\n            block.timestamp >= proposal.deadline;\r\n    }\r\n\r\n    function performUpkeep(bytes calldata /* performData */) external override {\r\n        if (numProposals == 0) {\r\n            return;\r\n        }\r\n        Proposal storage proposal = proposals[numProposals - 1];\r\n        if (!proposal.executed && block.timestamp >= proposal.deadline) {\r\n            executeProposal(numProposals - 1);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}