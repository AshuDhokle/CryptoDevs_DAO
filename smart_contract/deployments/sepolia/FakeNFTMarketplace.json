{
  "address": "0xAF75507b14dc3645301259E9c81B03a4074207DE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa273e9bc347f0a46580591d8ac2738a91ef7b005b80123e71aedb57ef8f5ca37",
  "receipt": {
    "to": null,
    "from": "0x49D00b69989f270864DBF3556979852511317aaA",
    "contractAddress": "0xAF75507b14dc3645301259E9c81B03a4074207DE",
    "transactionIndex": 59,
    "gasUsed": "589647",
    "logsBloom": "0x
    "blockHash": "0x3819858363352de113cb195be57caded7f03326b21df49e27e5ad2b8d4e1537f",
    "transactionHash": "0xa273e9bc347f0a46580591d8ac2738a91ef7b005b80123e71aedb57ef8f5ca37",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 8011637,
        "transactionHash": "0xa273e9bc347f0a46580591d8ac2738a91ef7b005b80123e71aedb57ef8f5ca37",
        "address": "0xAF75507b14dc3645301259E9c81B03a4074207DE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d00b69989f270864dbf3556979852511317aaa"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x3819858363352de113cb195be57caded7f03326b21df49e27e5ad2b8d4e1537f"
      }
    ],
    "blockNumber": 8011637,
    "cumulativeGasUsed": "9312793",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6b7b9451fab0f0ecc5188e82c9758767",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"available(uint256)\":{\"details\":\"available() checks whether the given tokenId has already been sold or not\",\"params\":{\"_tokenId\":\"- the tokenId to check for\"}},\"getPrice()\":{\"details\":\"getPrice() returns the price of one NFT\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchase(uint256)\":{\"details\":\"purchase() accepts ETH and marks the owner of the given tokenId as the caller address\",\"params\":{\"_tokenId\":\"- the fake NFT token Id to purchase\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"nftPrice\":{\"details\":\"Set the purchase price for each Fake NFT\"},\"tokens\":{\"details\":\"Maintain a mapping of Fake TokenID to Owner addresses\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FakeNFTMarket.sol\":\"FakeNFTMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/FakeNFTMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract FakeNFTMarketplace is Ownable{\\r\\n    /// @dev Maintain a mapping of Fake TokenID to Owner addresses\\r\\n    mapping(uint256 => address) public tokens;\\r\\n    \\r\\n    /// @dev Set the purchase price for each Fake NFT\\r\\n    uint256 nftPrice = 0.03 ether;\\r\\n    \\r\\n    constructor () Ownable(msg.sender){}\\r\\n\\r\\n    /// @dev purchase() accepts ETH and marks the owner of the given tokenId as the caller address\\r\\n    /// @param _tokenId - the fake NFT token Id to purchase\\r\\n    function purchase(uint256 _tokenId) external payable {\\r\\n        require(msg.value == nftPrice, \\\"This NFT costs 0.03 ether\\\");\\r\\n        tokens[_tokenId] = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @dev getPrice() returns the price of one NFT\\r\\n    function getPrice() external view returns (uint256) {\\r\\n        return nftPrice;\\r\\n    }\\r\\n\\r\\n    /// @dev available() checks whether the given tokenId has already been sold or not\\r\\n    /// @param _tokenId - the tokenId to check for\\r\\n    function available(uint256 _tokenId) external view returns (bool) {\\r\\n        // address(0) = 0x0000000000000000000000000000000000000000\\r\\n        // This is the default value for addresses in Solidity\\r\\n        if (tokens[_tokenId] == address(0)) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function Withdraw() public payable onlyOwner(){\\r\\n        address _owner = owner();\\r\\n        uint256 amount = address(this).balance;\\r\\n        (bool sent, ) =  _owner.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x85880817e0f3e6256e520f1547cf60acf4d8bc35c57a3335b6a3f465da660e09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052666a94d74f43000060025534801561001b57600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361008f5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161008691906101a9565b60405180910390fd5b61009e816100a460201b60201c565b506101c4565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019382610168565b9050919050565b6101a381610188565b82525050565b60006020820190506101be600083018461019a565b92915050565b6108c9806101d36000396000f3fe60806040526004361061007b5760003560e01c806396e494e81161004e57806396e494e81461010957806398d5fdca14610146578063efef39a114610171578063f2fde38b1461018d5761007b565b80634f64b2be1461008057806357ea89b6146100bd578063715018a6146100c75780638da5cb5b146100de575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610622565b6101b6565b6040516100b49190610690565b60405180910390f35b6100c56101e9565b005b3480156100d357600080fd5b506100dc6102b3565b005b3480156100ea57600080fd5b506100f36102c7565b6040516101009190610690565b60405180910390f35b34801561011557600080fd5b50610130600480360381019061012b9190610622565b6102f0565b60405161013d91906106c6565b60405180910390f35b34801561015257600080fd5b5061015b61036b565b60405161016891906106f0565b60405180910390f35b61018b60048036038101906101869190610622565b610375565b005b34801561019957600080fd5b506101b460048036038101906101af9190610737565b61040e565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101f1610494565b60006101fb6102c7565b9050600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161022890610795565b60006040518083038185875af1925050503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b50509050806102ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a590610807565b60405180910390fd5b505050565b6102bb610494565b6102c5600061051b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103615760019050610366565b600090505b919050565b6000600254905090565b60025434146103b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b090610873565b60405180910390fd5b336001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610416610494565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104885760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161047f9190610690565b60405180910390fd5b6104918161051b565b50565b61049c6105df565b73ffffffffffffffffffffffffffffffffffffffff166104ba6102c7565b73ffffffffffffffffffffffffffffffffffffffff1614610519576104dd6105df565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016105109190610690565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6105ff816105ec565b811461060a57600080fd5b50565b60008135905061061c816105f6565b92915050565b600060208284031215610638576106376105e7565b5b60006106468482850161060d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067a8261064f565b9050919050565b61068a8161066f565b82525050565b60006020820190506106a56000830184610681565b92915050565b60008115159050919050565b6106c0816106ab565b82525050565b60006020820190506106db60008301846106b7565b92915050565b6106ea816105ec565b82525050565b600060208201905061070560008301846106e1565b92915050565b6107148161066f565b811461071f57600080fd5b50565b6000813590506107318161070b565b92915050565b60006020828403121561074d5761074c6105e7565b5b600061075b84828501610722565b91505092915050565b600081905092915050565b50565b600061077f600083610764565b915061078a8261076f565b600082019050919050565b60006107a082610772565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006107f16014836107aa565b91506107fc826107bb565b602082019050919050565b60006020820190508181036000830152610820816107e4565b9050919050565b7f54686973204e465420636f73747320302e303320657468657200000000000000600082015250565b600061085d6019836107aa565b915061086882610827565b602082019050919050565b6000602082019050818103600083015261088c81610850565b905091905056fea26469706673582212209e799dff6b14d0cfb2e24b2586f7e0ac2fd0183990ce750aa6ad0fa0b08598ff64736f6c634300081c0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c806396e494e81161004e57806396e494e81461010957806398d5fdca14610146578063efef39a114610171578063f2fde38b1461018d5761007b565b80634f64b2be1461008057806357ea89b6146100bd578063715018a6146100c75780638da5cb5b146100de575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610622565b6101b6565b6040516100b49190610690565b60405180910390f35b6100c56101e9565b005b3480156100d357600080fd5b506100dc6102b3565b005b3480156100ea57600080fd5b506100f36102c7565b6040516101009190610690565b60405180910390f35b34801561011557600080fd5b50610130600480360381019061012b9190610622565b6102f0565b60405161013d91906106c6565b60405180910390f35b34801561015257600080fd5b5061015b61036b565b60405161016891906106f0565b60405180910390f35b61018b60048036038101906101869190610622565b610375565b005b34801561019957600080fd5b506101b460048036038101906101af9190610737565b61040e565b005b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101f1610494565b60006101fb6102c7565b9050600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161022890610795565b60006040518083038185875af1925050503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b50509050806102ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a590610807565b60405180910390fd5b505050565b6102bb610494565b6102c5600061051b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103615760019050610366565b600090505b919050565b6000600254905090565b60025434146103b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b090610873565b60405180910390fd5b336001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610416610494565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104885760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161047f9190610690565b60405180910390fd5b6104918161051b565b50565b61049c6105df565b73ffffffffffffffffffffffffffffffffffffffff166104ba6102c7565b73ffffffffffffffffffffffffffffffffffffffff1614610519576104dd6105df565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016105109190610690565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b6105ff816105ec565b811461060a57600080fd5b50565b60008135905061061c816105f6565b92915050565b600060208284031215610638576106376105e7565b5b60006106468482850161060d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067a8261064f565b9050919050565b61068a8161066f565b82525050565b60006020820190506106a56000830184610681565b92915050565b60008115159050919050565b6106c0816106ab565b82525050565b60006020820190506106db60008301846106b7565b92915050565b6106ea816105ec565b82525050565b600060208201905061070560008301846106e1565b92915050565b6107148161066f565b811461071f57600080fd5b50565b6000813590506107318161070b565b92915050565b60006020828403121561074d5761074c6105e7565b5b600061075b84828501610722565b91505092915050565b600081905092915050565b50565b600061077f600083610764565b915061078a8261076f565b600082019050919050565b60006107a082610772565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006107f16014836107aa565b91506107fc826107bb565b602082019050919050565b60006020820190508181036000830152610820816107e4565b9050919050565b7f54686973204e465420636f73747320302e303320657468657200000000000000600082015250565b600061085d6019836107aa565b915061086882610827565b602082019050919050565b6000602082019050818103600083015261088c81610850565b905091905056fea26469706673582212209e799dff6b14d0cfb2e24b2586f7e0ac2fd0183990ce750aa6ad0fa0b08598ff64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "available(uint256)": {
        "details": "available() checks whether the given tokenId has already been sold or not",
        "params": {
          "_tokenId": "- the tokenId to check for"
        }
      },
      "getPrice()": {
        "details": "getPrice() returns the price of one NFT"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchase(uint256)": {
        "details": "purchase() accepts ETH and marks the owner of the given tokenId as the caller address",
        "params": {
          "_tokenId": "- the fake NFT token Id to purchase"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "nftPrice": {
        "details": "Set the purchase price for each Fake NFT"
      },
      "tokens": {
        "details": "Maintain a mapping of Fake TokenID to Owner addresses"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 76,
        "contract": "contracts/FakeNFTMarket.sol:FakeNFTMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7444,
        "contract": "contracts/FakeNFTMarket.sol:FakeNFTMarketplace",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7448,
        "contract": "contracts/FakeNFTMarket.sol:FakeNFTMarketplace",
        "label": "nftPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}