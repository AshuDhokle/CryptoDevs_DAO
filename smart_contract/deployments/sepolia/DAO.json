{
  "address": "0x40e57D2e4776Fd9f19ba9b72d22d4ADD0c6C7ab4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cryptoDevsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fakeNftMarketaddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DAO_ALREADY_EXCECUTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO_DEADLINE_NOT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO_NOT_ENOUGH_ETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO__ALREADY_VOTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO__DEADLINE_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO__NOT_DAO_MEMBER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO__TOKEN_NOT_AVAILABLe",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yayVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nayVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        },
        {
          "internalType": "enum DAO.Vote",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "voteOnProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x978496fa0c2f77e4e194fc24f57d3667f7cbbc76989e3e9d0831711c1c993627",
  "receipt": {
    "to": null,
    "from": "0x49D00b69989f270864DBF3556979852511317aaA",
    "contractAddress": "0x40e57D2e4776Fd9f19ba9b72d22d4ADD0c6C7ab4",
    "transactionIndex": 83,
    "gasUsed": "1059600",
    "logsBloom": "0x
    "blockHash": "0x25feeaca080e3720548fb7bd7c315a5042e6a7e4d93ff590cbcb6c5721ffb171",
    "transactionHash": "0x978496fa0c2f77e4e194fc24f57d3667f7cbbc76989e3e9d0831711c1c993627",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 7719509,
        "transactionHash": "0x978496fa0c2f77e4e194fc24f57d3667f7cbbc76989e3e9d0831711c1c993627",
        "address": "0x40e57D2e4776Fd9f19ba9b72d22d4ADD0c6C7ab4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d00b69989f270864dbf3556979852511317aaa"
        ],
        "data": "0x",
        "logIndex": 4334,
        "blockHash": "0x25feeaca080e3720548fb7bd7c315a5042e6a7e4d93ff590cbcb6c5721ffb171"
      }
    ],
    "blockNumber": 7719509,
    "cumulativeGasUsed": "35444832",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0436a2651c3e9397FE6351d2fefF4858a3cD2E4f",
    "0x1f7038199eDd2BFEEd44cEA0748619c5f1Aa118a"
  ],
  "numDeployments": 1,
  "solcInputHash": "e9d9eb0c6cb0a6b02e2182a012864399",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptoDevsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fakeNftMarketaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAO_ALREADY_EXCECUTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO_DEADLINE_NOT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO_NOT_ENOUGH_ETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO__ALREADY_VOTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO__DEADLINE_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO__NOT_DAO_MEMBER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO__TOKEN_NOT_AVAILABLe\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yayVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nayVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"internalType\":\"enum DAO.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteOnProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface ICryptoDevs {\\r\\n    function balanceOf(address owner) external view returns(uint256);\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    external view returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IFakeNFTMarketplace {\\r\\n    /// @dev getPrice() returns the price of an NFT from the FakeNFTMarketplace\\r\\n    /// @return Returns the price in Wei for an NFT\\r\\n    function getPrice() external view returns (uint256);\\r\\n\\r\\n    /// @dev available() returns whether or not the given _tokenId has already been purchased\\r\\n    /// @return Returns a boolean value - true if available, false if not\\r\\n    function available(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    /// @dev purchase() purchases an NFT from the FakeNFTMarketplace\\r\\n    /// @param _tokenId - the fake NFT tokenID to purchase\\r\\n    function purchase(uint256 _tokenId) external payable;\\r\\n}\\r\\n\\r\\nerror DAO__NOT_DAO_MEMBER();\\r\\nerror DAO__TOKEN_NOT_AVAILABLe();\\r\\nerror DAO__DEADLINE_EXCEEDED();\\r\\nerror DAO__ALREADY_VOTED();\\r\\nerror DAO_DEADLINE_NOT_EXCEEDED();\\r\\nerror DAO_ALREADY_EXCECUTED();\\r\\nerror DAO_NOT_ENOUGH_ETH();\\r\\n\\r\\ncontract DAO is Ownable{\\r\\n\\r\\n    ICryptoDevs cryptodevs;     \\r\\n    IFakeNFTMarketplace nftMarket;\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 nftTokenId;\\r\\n        uint256 deadline;\\r\\n        uint256 yayVotes;\\r\\n        uint256 nayVotes;\\r\\n        bool executed;\\r\\n\\r\\n        mapping(uint256 => bool) voters;\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    uint256 numProposals;\\r\\n\\r\\n    enum Vote{\\r\\n        YAY,\\r\\n        NAY\\r\\n    }\\r\\n\\r\\n    constructor(address _cryptoDevsAddress, address _fakeNftMarketaddress) Ownable(msg.sender){\\r\\n        cryptodevs = ICryptoDevs(_cryptoDevsAddress);    \\r\\n        nftMarket = IFakeNFTMarketplace(_fakeNftMarketaddress);\\r\\n    }\\r\\n    \\r\\n    modifier nftHolderOnly(){\\r\\n        if(cryptodevs.balanceOf(msg.sender) < 1){\\r\\n            revert DAO__NOT_DAO_MEMBER();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier activeProposalOnly(uint256 _idx){\\r\\n        if(block.timestamp >= proposals[_idx].deadline){\\r\\n            revert DAO__DEADLINE_EXCEEDED();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier inActiveProposalOnly(uint256 _idx){\\r\\n        if(block.timestamp < proposals[_idx].deadline){\\r\\n            revert DAO_DEADLINE_NOT_EXCEEDED();\\r\\n        }\\r\\n        if(proposals[_idx].executed == true){\\r\\n            revert DAO_ALREADY_EXCECUTED();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function createProposal(uint256 _nftTokenId) public nftHolderOnly returns(uint256) {\\r\\n        if(!nftMarket.available(_nftTokenId)){\\r\\n            revert DAO__TOKEN_NOT_AVAILABLe();\\r\\n        }\\r\\n\\r\\n        Proposal storage proposal = proposals[numProposals];\\r\\n        \\r\\n        proposal.nftTokenId = _nftTokenId;\\r\\n        proposal.deadline = block.timestamp + 10 minutes;\\r\\n        \\r\\n        numProposals++;\\r\\n\\r\\n        return numProposals - 1;\\r\\n    }\\r\\n\\r\\n    function voteOnProposal(uint256 _idx, Vote vote) \\r\\n    external nftHolderOnly activeProposalOnly(_idx) {\\r\\n        Proposal storage proposal = proposals[_idx];\\r\\n\\r\\n        uint256 voterNFTBalance = cryptodevs.balanceOf(msg.sender);\\r\\n        uint256 numVotes = 0;\\r\\n\\r\\n        for(uint256 i = 0; i<voterNFTBalance; i++){\\r\\n            uint256 tokenId = cryptodevs.tokenOfOwnerByIndex(msg.sender, i);\\r\\n            if(proposal.voters[tokenId] == false){\\r\\n                numVotes++;\\r\\n                proposal.voters[tokenId] = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(numVotes == 0){\\r\\n            revert DAO__ALREADY_VOTED();\\r\\n        }\\r\\n\\r\\n        if(vote == Vote.YAY){\\r\\n            proposal.yayVotes += numVotes;\\r\\n        }else {\\r\\n            proposal.nayVotes += numVotes;\\r\\n        }\\r\\n    }\\r\\n     \\r\\n    function executeProposal(uint256 _idx) \\r\\n    public nftHolderOnly onlyOwner inActiveProposalOnly(_idx){\\r\\n      Proposal storage proposal = proposals[_idx];\\r\\n\\r\\n      if(proposal.yayVotes > proposal.nayVotes){\\r\\n        uint256 nftPrice = nftMarket.getPrice();\\r\\n        if(address(this).balance < nftPrice){\\r\\n            revert DAO_NOT_ENOUGH_ETH();\\r\\n        }\\r\\n        nftMarket.purchase{value : nftPrice}(proposal.nftTokenId);\\r\\n      }\\r\\n      proposal.executed = true;\\r\\n    } \\r\\n}\",\"keccak256\":\"0x5962891772c13c0327a69e46bd325981ac3d3039fc2eb9675ce872d3ead55b72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516113b43803806113b483398181016040528101906100329190610265565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c91906102b4565b60405180910390fd5b6100b48161013e60201b60201c565b5081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506102cf565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023282610207565b9050919050565b61024281610227565b811461024d57600080fd5b50565b60008151905061025f81610239565b92915050565b6000806040838503121561027c5761027b610202565b5b600061028a85828601610250565b925050602061029b85828601610250565b9150509250929050565b6102ae81610227565b82525050565b60006020820190506102c960008301846102a5565b92915050565b6110d6806102de6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146101025780638da5cb5b1461010c578063efafb22e1461012a578063f2fde38b146101465761007d565b8063013cf08b146100825780630d61b519146100b65780635a43dc00146100d2575b600080fd5b61009c60048036038101906100979190610cef565b610162565b6040516100ad959493929190610d46565b60405180910390f35b6100d060048036038101906100cb9190610cef565b6101a5565b005b6100ec60048036038101906100e79190610cef565b6104e0565b6040516100f99190610d99565b60405180910390f35b61010a6106f0565b005b610114610704565b6040516101219190610df5565b60405180910390f35b610144600480360381019061013f9190610e35565b61072d565b005b610160600480360381019061015b9190610ea1565b610adb565b005b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102019190610df5565b602060405180830381865afa15801561021e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102429190610ee3565b101561027a576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610282610b61565b8060036000828152602001908152602001600020600101544210156102d3576040517fec6accc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600115156003600083815260200190815260200160002060040160009054906101000a900460ff16151503610334576040517f31b4a33800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600084815260200190815260200160002090508060030154816002015411156104be576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610ee3565b90508047101561042a576040517f8740fb1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efef39a18284600001546040518363ffffffff1660e01b815260040161048a9190610d99565b6000604051808303818588803b1580156104a357600080fd5b505af11580156104b7573d6000803e3d6000fd5b5050505050505b60018160040160006101000a81548160ff021916908315150217905550505050565b600060018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161053e9190610df5565b602060405180830381865afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190610ee3565b10156105b7576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e8836040518263ffffffff1660e01b81526004016106129190610d99565b602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190610f3c565b610689576040517f8c83255800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600060045481526020019081526020016000209050828160000181905550610258426106b99190610f98565b8160010181905550600460008154809291906106d490610fcc565b919050555060016004546106e89190611014565b915050919050565b6106f8610b61565b6107026000610be8565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107899190610df5565b602060405180830381865afa1580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca9190610ee3565b1015610802576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160036000828152602001908152602001600020600101544210610852576040517f2497e58c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600085815260200190815260200160002090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108c69190610df5565b602060405180830381865afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190610ee3565b90506000805b82811015610a30576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b8152600401610974929190611048565b602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190610ee3565b90506000151585600501600083815260200190815260200160002060009054906101000a900460ff16151503610a225782806109f090610fcc565b935050600185600501600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50808060010191505061090d565b5060008103610a6b576040517f1060bfb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610a7f57610a7e611071565b5b856001811115610a9257610a91611071565b5b03610ab75780836002016000828254610aab9190610f98565b92505081905550610ad3565b80836003016000828254610acb9190610f98565b925050819055505b505050505050565b610ae3610b61565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b555760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610b4c9190610df5565b60405180910390fd5b610b5e81610be8565b50565b610b69610cac565b73ffffffffffffffffffffffffffffffffffffffff16610b87610704565b73ffffffffffffffffffffffffffffffffffffffff1614610be657610baa610cac565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610bdd9190610df5565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610ccc81610cb9565b8114610cd757600080fd5b50565b600081359050610ce981610cc3565b92915050565b600060208284031215610d0557610d04610cb4565b5b6000610d1384828501610cda565b91505092915050565b610d2581610cb9565b82525050565b60008115159050919050565b610d4081610d2b565b82525050565b600060a082019050610d5b6000830188610d1c565b610d686020830187610d1c565b610d756040830186610d1c565b610d826060830185610d1c565b610d8f6080830184610d37565b9695505050505050565b6000602082019050610dae6000830184610d1c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ddf82610db4565b9050919050565b610def81610dd4565b82525050565b6000602082019050610e0a6000830184610de6565b92915050565b60028110610e1d57600080fd5b50565b600081359050610e2f81610e10565b92915050565b60008060408385031215610e4c57610e4b610cb4565b5b6000610e5a85828601610cda565b9250506020610e6b85828601610e20565b9150509250929050565b610e7e81610dd4565b8114610e8957600080fd5b50565b600081359050610e9b81610e75565b92915050565b600060208284031215610eb757610eb6610cb4565b5b6000610ec584828501610e8c565b91505092915050565b600081519050610edd81610cc3565b92915050565b600060208284031215610ef957610ef8610cb4565b5b6000610f0784828501610ece565b91505092915050565b610f1981610d2b565b8114610f2457600080fd5b50565b600081519050610f3681610f10565b92915050565b600060208284031215610f5257610f51610cb4565b5b6000610f6084828501610f27565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fa382610cb9565b9150610fae83610cb9565b9250828201905080821115610fc657610fc5610f69565b5b92915050565b6000610fd782610cb9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361100957611008610f69565b5b600182019050919050565b600061101f82610cb9565b915061102a83610cb9565b925082820390508181111561104257611041610f69565b5b92915050565b600060408201905061105d6000830185610de6565b61106a6020830184610d1c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212207537051a0f0ef8b453b610b693febdec83fc01b5f5be844379fbd5c94c9c3cc364736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146101025780638da5cb5b1461010c578063efafb22e1461012a578063f2fde38b146101465761007d565b8063013cf08b146100825780630d61b519146100b65780635a43dc00146100d2575b600080fd5b61009c60048036038101906100979190610cef565b610162565b6040516100ad959493929190610d46565b60405180910390f35b6100d060048036038101906100cb9190610cef565b6101a5565b005b6100ec60048036038101906100e79190610cef565b6104e0565b6040516100f99190610d99565b60405180910390f35b61010a6106f0565b005b610114610704565b6040516101219190610df5565b60405180910390f35b610144600480360381019061013f9190610e35565b61072d565b005b610160600480360381019061015b9190610ea1565b610adb565b005b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102019190610df5565b602060405180830381865afa15801561021e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102429190610ee3565b101561027a576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610282610b61565b8060036000828152602001908152602001600020600101544210156102d3576040517fec6accc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600115156003600083815260200190815260200160002060040160009054906101000a900460ff16151503610334576040517f31b4a33800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600084815260200190815260200160002090508060030154816002015411156104be576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610ee3565b90508047101561042a576040517f8740fb1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efef39a18284600001546040518363ffffffff1660e01b815260040161048a9190610d99565b6000604051808303818588803b1580156104a357600080fd5b505af11580156104b7573d6000803e3d6000fd5b5050505050505b60018160040160006101000a81548160ff021916908315150217905550505050565b600060018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161053e9190610df5565b602060405180830381865afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190610ee3565b10156105b7576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e8836040518263ffffffff1660e01b81526004016106129190610d99565b602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190610f3c565b610689576040517f8c83255800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600060045481526020019081526020016000209050828160000181905550610258426106b99190610f98565b8160010181905550600460008154809291906106d490610fcc565b919050555060016004546106e89190611014565b915050919050565b6106f8610b61565b6107026000610be8565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107899190610df5565b602060405180830381865afa1580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca9190610ee3565b1015610802576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160036000828152602001908152602001600020600101544210610852576040517f2497e58c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600085815260200190815260200160002090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108c69190610df5565b602060405180830381865afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190610ee3565b90506000805b82811015610a30576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5933846040518363ffffffff1660e01b8152600401610974929190611048565b602060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190610ee3565b90506000151585600501600083815260200190815260200160002060009054906101000a900460ff16151503610a225782806109f090610fcc565b935050600185600501600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50808060010191505061090d565b5060008103610a6b576040517f1060bfb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610a7f57610a7e611071565b5b856001811115610a9257610a91611071565b5b03610ab75780836002016000828254610aab9190610f98565b92505081905550610ad3565b80836003016000828254610acb9190610f98565b925050819055505b505050505050565b610ae3610b61565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b555760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610b4c9190610df5565b60405180910390fd5b610b5e81610be8565b50565b610b69610cac565b73ffffffffffffffffffffffffffffffffffffffff16610b87610704565b73ffffffffffffffffffffffffffffffffffffffff1614610be657610baa610cac565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610bdd9190610df5565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610ccc81610cb9565b8114610cd757600080fd5b50565b600081359050610ce981610cc3565b92915050565b600060208284031215610d0557610d04610cb4565b5b6000610d1384828501610cda565b91505092915050565b610d2581610cb9565b82525050565b60008115159050919050565b610d4081610d2b565b82525050565b600060a082019050610d5b6000830188610d1c565b610d686020830187610d1c565b610d756040830186610d1c565b610d826060830185610d1c565b610d8f6080830184610d37565b9695505050505050565b6000602082019050610dae6000830184610d1c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ddf82610db4565b9050919050565b610def81610dd4565b82525050565b6000602082019050610e0a6000830184610de6565b92915050565b60028110610e1d57600080fd5b50565b600081359050610e2f81610e10565b92915050565b60008060408385031215610e4c57610e4b610cb4565b5b6000610e5a85828601610cda565b9250506020610e6b85828601610e20565b9150509250929050565b610e7e81610dd4565b8114610e8957600080fd5b50565b600081359050610e9b81610e75565b92915050565b600060208284031215610eb757610eb6610cb4565b5b6000610ec584828501610e8c565b91505092915050565b600081519050610edd81610cc3565b92915050565b600060208284031215610ef957610ef8610cb4565b5b6000610f0784828501610ece565b91505092915050565b610f1981610d2b565b8114610f2457600080fd5b50565b600081519050610f3681610f10565b92915050565b600060208284031215610f5257610f51610cb4565b5b6000610f6084828501610f27565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fa382610cb9565b9150610fae83610cb9565b9250828201905080821115610fc657610fc5610f69565b5b92915050565b6000610fd782610cb9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361100957611008610f69565b5b600182019050919050565b600061101f82610cb9565b915061102a83610cb9565b925082820390508181111561104257611041610f69565b5b92915050565b600060408201905061105d6000830185610de6565b61106a6020830184610d1c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212207537051a0f0ef8b453b610b693febdec83fc01b5f5be844379fbd5c94c9c3cc364736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6882,
        "contract": "contracts/DAO.sol:DAO",
        "label": "cryptodevs",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICryptoDevs)6842"
      },
      {
        "astId": 6885,
        "contract": "contracts/DAO.sol:DAO",
        "label": "nftMarket",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFakeNFTMarketplace)6863"
      },
      {
        "astId": 6905,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)6900_storage)"
      },
      {
        "astId": 6907,
        "contract": "contracts/DAO.sol:DAO",
        "label": "numProposals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICryptoDevs)6842": {
        "encoding": "inplace",
        "label": "contract ICryptoDevs",
        "numberOfBytes": "20"
      },
      "t_contract(IFakeNFTMarketplace)6863": {
        "encoding": "inplace",
        "label": "contract IFakeNFTMarketplace",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)6900_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)6900_storage"
      },
      "t_struct(Proposal)6900_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposal",
        "members": [
          {
            "astId": 6887,
            "contract": "contracts/DAO.sol:DAO",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6889,
            "contract": "contracts/DAO.sol:DAO",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6891,
            "contract": "contracts/DAO.sol:DAO",
            "label": "yayVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6893,
            "contract": "contracts/DAO.sol:DAO",
            "label": "nayVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6895,
            "contract": "contracts/DAO.sol:DAO",
            "label": "executed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 6899,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}