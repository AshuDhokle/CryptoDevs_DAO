{
  "address": "0xe1440DFc7786cb49A38E4db6D5BBF3f5d3d4A85E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cryptoDevsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fakeNftMarketaddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DAO_ALREADY_EXCECUTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO_NOT_ENOUGH_ETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO_PropoalAlreadyRunning",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO__ALREADY_VOTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO__NOT_DAO_MEMBER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DAO__TOKEN_NOT_AVAILABLE",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "ProposalEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum DAO.Vote",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "VoteSubmitted",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalRunning",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yayVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nayVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        },
        {
          "internalType": "enum DAO.Vote",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "voteOnProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xecde734eb6d0cad095720665537c4f5f8a4b9f33ccad6ec1491106de8a4ee0aa",
  "receipt": {
    "to": null,
    "from": "0x49D00b69989f270864DBF3556979852511317aaA",
    "contractAddress": "0xe1440DFc7786cb49A38E4db6D5BBF3f5d3d4A85E",
    "transactionIndex": 87,
    "gasUsed": "1261545",
    "logsBloom": "0x
    "blockHash": "0x5f397e14951b46b8adbfdda7292020496d220f44fcc6de6d8d29cdec452e1ae0",
    "transactionHash": "0xecde734eb6d0cad095720665537c4f5f8a4b9f33ccad6ec1491106de8a4ee0aa",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 8025902,
        "transactionHash": "0xecde734eb6d0cad095720665537c4f5f8a4b9f33ccad6ec1491106de8a4ee0aa",
        "address": "0xe1440DFc7786cb49A38E4db6D5BBF3f5d3d4A85E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000049d00b69989f270864dbf3556979852511317aaa"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x5f397e14951b46b8adbfdda7292020496d220f44fcc6de6d8d29cdec452e1ae0"
      }
    ],
    "blockNumber": 8025902,
    "cumulativeGasUsed": "9308251",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2b7d17aa0B5B0A731453931Be2FBD6fF9f0ea456",
    "0xAF75507b14dc3645301259E9c81B03a4074207DE"
  ],
  "numDeployments": 9,
  "solcInputHash": "6161ed9a09b428662084a9101e33effc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptoDevsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fakeNftMarketaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAO_ALREADY_EXCECUTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO_NOT_ENOUGH_ETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO_PropoalAlreadyRunning\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO__ALREADY_VOTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO__NOT_DAO_MEMBER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAO__TOKEN_NOT_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ProposalEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DAO.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"VoteSubmitted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yayVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nayVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"internalType\":\"enum DAO.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteOnProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\ninterface ICryptoDevs {\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function tokenOfOwnerByIndex(\\r\\n        address owner,\\r\\n        uint256 index\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IFakeNFTMarketplace {\\r\\n    function getPrice() external view returns (uint256);\\r\\n\\r\\n    function available(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    function purchase(uint256 _tokenId) external payable;\\r\\n}\\r\\n\\r\\nerror DAO__NOT_DAO_MEMBER();\\r\\nerror DAO__TOKEN_NOT_AVAILABLE();\\r\\nerror DAO__DEADLINE_EXCEEDED();\\r\\nerror DAO__ALREADY_VOTED();\\r\\nerror DAO_DEADLINE_NOT_EXCEEDED();\\r\\nerror DAO_ALREADY_EXCECUTED();\\r\\nerror DAO_NOT_ENOUGH_ETH();\\r\\nerror DAO_PropoalAlreadyRunning();\\r\\nerror DAO__NO_NFT_BALANCE();\\r\\n\\r\\ncontract DAO is Ownable, AutomationCompatibleInterface {\\r\\n    ICryptoDevs cryptodevs;\\r\\n    IFakeNFTMarketplace nftMarket;\\r\\n    enum Vote {\\r\\n        YAY,\\r\\n        NAY\\r\\n    }\\r\\n\\r\\n    event ProposalCreated(uint256 indexed proposalID);\\r\\n    event ProposalEnded(uint256 indexed proposalID, bool indexed result);\\r\\n    event VoteSubmitted(\\r\\n        uint256 indexed proposalID,\\r\\n        address indexed voter,\\r\\n        Vote indexed vote\\r\\n    ); //include the vote\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 nftTokenId;\\r\\n        uint256 deadline;\\r\\n        uint256 yayVotes;\\r\\n        uint256 nayVotes;\\r\\n        bool executed;\\r\\n        mapping(address => bool) voters;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    uint256 public numProposals;\\r\\n    bool public proposalRunning;\\r\\n\\r\\n    constructor(\\r\\n        address _cryptoDevsAddress,\\r\\n        address _fakeNftMarketaddress\\r\\n    ) Ownable(msg.sender) {\\r\\n        cryptodevs = ICryptoDevs(_cryptoDevsAddress);\\r\\n        nftMarket = IFakeNFTMarketplace(_fakeNftMarketaddress);\\r\\n    }\\r\\n\\r\\n    modifier nftHolderOnly() {\\r\\n        if (cryptodevs.balanceOf(msg.sender) < 1) {\\r\\n            revert DAO__NOT_DAO_MEMBER();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier activeProposalOnly(uint256 _idx) {\\r\\n        if (proposals[_idx].executed) {\\r\\n            revert DAO_ALREADY_EXCECUTED();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier proposalAlreadyRunning() {\\r\\n        if (proposalRunning) {\\r\\n            revert DAO_PropoalAlreadyRunning();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function createProposal(\\r\\n        uint256 _nftTokenId,\\r\\n        uint256 _deadline\\r\\n    ) public nftHolderOnly proposalAlreadyRunning returns (uint256) {\\r\\n        if (!nftMarket.available(_nftTokenId)) {\\r\\n            revert DAO__TOKEN_NOT_AVAILABLE();\\r\\n        }\\r\\n\\r\\n        Proposal storage proposal = proposals[numProposals];\\r\\n\\r\\n        proposal.nftTokenId = _nftTokenId;\\r\\n        proposal.deadline = block.timestamp + _deadline;\\r\\n        numProposals++;\\r\\n        proposalRunning = true;\\r\\n        emit ProposalCreated(numProposals - 1);\\r\\n        return numProposals - 1;\\r\\n    }\\r\\n\\r\\n    function voteOnProposal(\\r\\n        uint256 _idx,\\r\\n        Vote vote\\r\\n    ) public nftHolderOnly activeProposalOnly(_idx) {\\r\\n        Proposal storage proposal = proposals[_idx];\\r\\n\\r\\n        if (proposal.voters[msg.sender]) {\\r\\n            revert DAO__ALREADY_VOTED();\\r\\n        }\\r\\n\\r\\n        uint256 voterNFTBalance = cryptodevs.balanceOf(msg.sender);\\r\\n\\r\\n        require(voterNFTBalance > 0, \\\"Not enough balance\\\");\\r\\n\\r\\n        if (vote == Vote.YAY) {\\r\\n            proposal.yayVotes += voterNFTBalance;\\r\\n        } else {\\r\\n            proposal.nayVotes += voterNFTBalance;\\r\\n        }\\r\\n        proposal.voters[msg.sender] = true;\\r\\n        emit VoteSubmitted(_idx, msg.sender, vote);\\r\\n    }\\r\\n\\r\\n    function executeProposal(uint256 _idx) public {\\r\\n        Proposal storage proposal = proposals[_idx];\\r\\n        bool result = proposal.yayVotes > proposal.nayVotes;\\r\\n        if (result) {\\r\\n            uint256 nftPrice = nftMarket.getPrice();\\r\\n            if (address(this).balance < nftPrice) {\\r\\n                revert DAO_NOT_ENOUGH_ETH();\\r\\n            }\\r\\n            nftMarket.purchase{value: nftPrice}(proposal.nftTokenId);\\r\\n        }\\r\\n        proposal.executed = true;\\r\\n        proposalRunning = false;\\r\\n        emit ProposalEnded(_idx, result);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        if (numProposals == 0) {\\r\\n            return (false, \\\"\\\");\\r\\n        }\\r\\n        Proposal storage proposal = proposals[numProposals - 1];\\r\\n        upkeepNeeded =\\r\\n            !proposal.executed &&\\r\\n            proposalRunning &&\\r\\n            block.timestamp >= proposal.deadline;\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        executeProposal(numProposals - 1);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd767bbd42bf93d9af87cfebde22b574c3b0b5bca47b238b878badc4f17cc982b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c80636935bda6116100645780636935bda61461018c5780636e04ff0d146101c9578063715018a6146102075780638da5cb5b1461021e578063efafb22e14610249578063f2fde38b14610272576100a1565b8063013cf08b146100a35780630a091afb146100e45780630d61b5191461010f578063400e3949146101385780634585e33b14610163576100a1565b5b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610e75565b61029b565b6040516100db959493929190610ecc565b60405180910390f35b3480156100f057600080fd5b506100f96102de565b6040516101069190610f1f565b60405180910390f35b34801561011b57600080fd5b5061013660048036038101906101319190610e75565b6102f1565b005b34801561014457600080fd5b5061014d6104ed565b60405161015a9190610f3a565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610fba565b6104f3565b005b34801561019857600080fd5b506101b360048036038101906101ae9190611007565b61050e565b6040516101c09190610f3a565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190610fba565b6107ba565b6040516101fe9291906110d7565b60405180910390f35b34801561021357600080fd5b5061021c61084e565b005b34801561022a57600080fd5b50610233610862565b6040516102409190611148565b60405180910390f35b34801561025557600080fd5b50610270600480360381019061026b9190611188565b61088b565b005b34801561027e57600080fd5b50610299600480360381019061029491906111f4565b610c5c565b005b60036020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b600560009054906101000a900460ff1681565b60006003600083815260200190815260200160002090506000816003015482600201541190508015610480576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190611236565b9050804710156103ec576040517f8740fb1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efef39a18285600001546040518363ffffffff1660e01b815260040161044c9190610f3a565b6000604051808303818588803b15801561046557600080fd5b505af1158015610479573d6000803e3d6000fd5b5050505050505b60018260040160006101000a81548160ff0219169083151502179055506000600560006101000a81548160ff021916908315150217905550801515837f712354cc8b71a852b959baf9994ba8b6dba9bc7f8d2cc4ec7d1f4898b31bd7c160405160405180910390a3505050565b60045481565b61050a60016004546105059190611292565b6102f1565b5050565b600060018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161056c9190611148565b602060405180830381865afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190611236565b10156105e5576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900460ff161561062c576040517fd360fdb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396e494e8846040518263ffffffff1660e01b81526004016106879190610f3a565b602060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c891906112f2565b6106fe576040517f4f3d4df500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600060045481526020019081526020016000209050838160000181905550824261072c919061131f565b81600101819055506004600081548092919061074790611353565b91905055506001600560006101000a81548160ff02191690831515021790555060016004546107769190611292565b7fc2c021f5d73c63c481d336fbbafec58f694fc45095f00b02d2deb8cca59afe0760405160405180910390a260016004546107b19190611292565b91505092915050565b600060606000600454036107e35760006040518060200160405280600081525091509150610847565b60006003600060016004546107f89190611292565b815260200190815260200160002090508060040160009054906101000a900460ff161580156108335750600560009054906101000a900460ff165b8015610843575080600101544210155b9250505b9250929050565b610856610ce2565b6108606000610d69565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108e79190611148565b602060405180830381865afa158015610904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109289190611236565b1015610960576040517fe9a6b3ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816003600082815260200190815260200160002060040160009054906101000a900460ff16156109bc576040517f31b4a33800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600085815260200190815260200160002090508060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a59576040517f1060bfb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ab69190611148565b602060405180830381865afa158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190611236565b905060008111610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b33906113f8565b60405180910390fd5b60006001811115610b5057610b4f611418565b5b846001811115610b6357610b62611418565b5b03610b885780826002016000828254610b7c919061131f565b92505081905550610ba4565b80826003016000828254610b9c919061131f565b925050819055505b60018260050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550836001811115610c1157610c10611418565b5b3373ffffffffffffffffffffffffffffffffffffffff16867f4dad34f5c0bfc89aa43660836c7a6aa46a7a6a5d437c6b9db430ac5d82c69b0760405160405180910390a45050505050565b610c64610ce2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cd65760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610ccd9190611148565b60405180910390fd5b610cdf81610d69565b50565b610cea610e2d565b73ffffffffffffffffffffffffffffffffffffffff16610d08610862565b73ffffffffffffffffffffffffffffffffffffffff1614610d6757610d2b610e2d565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d5e9190611148565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b6000819050919050565b610e5281610e3f565b8114610e5d57600080fd5b50565b600081359050610e6f81610e49565b92915050565b600060208284031215610e8b57610e8a610e35565b5b6000610e9984828501610e60565b91505092915050565b610eab81610e3f565b82525050565b60008115159050919050565b610ec681610eb1565b82525050565b600060a082019050610ee16000830188610ea2565b610eee6020830187610ea2565b610efb6040830186610ea2565b610f086060830185610ea2565b610f156080830184610ebd565b9695505050505050565b6000602082019050610f346000830184610ebd565b92915050565b6000602082019050610f4f6000830184610ea2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f7a57610f79610f55565b5b8235905067ffffffffffffffff811115610f9757610f96610f5a565b5b602083019150836001820283011115610fb357610fb2610f5f565b5b9250929050565b60008060208385031215610fd157610fd0610e35565b5b600083013567ffffffffffffffff811115610fef57610fee610e3a565b5b610ffb85828601610f64565b92509250509250929050565b6000806040838503121561101e5761101d610e35565b5b600061102c85828601610e60565b925050602061103d85828601610e60565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611081578082015181840152602081019050611066565b60008484015250505050565b6000601f19601f8301169050919050565b60006110a982611047565b6110b38185611052565b93506110c3818560208601611063565b6110cc8161108d565b840191505092915050565b60006040820190506110ec6000830185610ebd565b81810360208301526110fe818461109e565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061113282611107565b9050919050565b61114281611127565b82525050565b600060208201905061115d6000830184611139565b92915050565b6002811061117057600080fd5b50565b60008135905061118281611163565b92915050565b6000806040838503121561119f5761119e610e35565b5b60006111ad85828601610e60565b92505060206111be85828601611173565b9150509250929050565b6111d181611127565b81146111dc57600080fd5b50565b6000813590506111ee816111c8565b92915050565b60006020828403121561120a57611209610e35565b5b6000611218848285016111df565b91505092915050565b60008151905061123081610e49565b92915050565b60006020828403121561124c5761124b610e35565b5b600061125a84828501611221565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061129d82610e3f565b91506112a883610e3f565b92508282039050818111156112c0576112bf611263565b5b92915050565b6112cf81610eb1565b81146112da57600080fd5b50565b6000815190506112ec816112c6565b92915050565b60006020828403121561130857611307610e35565b5b6000611316848285016112dd565b91505092915050565b600061132a82610e3f565b915061133583610e3f565b925082820190508082111561134d5761134c611263565b5b92915050565b600061135e82610e3f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113905761138f611263565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b60006113e260128361139b565b91506113ed826113ac565b602082019050919050565b60006020820190508181036000830152611411816113d5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220b3dfce860044d886ac9b4e59ef828a9a5c3b6f695f90c5459a52f6ccdbcc827364736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 76,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7085,
        "contract": "contracts/DAO.sol:DAO",
        "label": "cryptodevs",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICryptoDevs)7042"
      },
      {
        "astId": 7088,
        "contract": "contracts/DAO.sol:DAO",
        "label": "nftMarket",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFakeNFTMarketplace)7060"
      },
      {
        "astId": 7130,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)7125_storage)"
      },
      {
        "astId": 7132,
        "contract": "contracts/DAO.sol:DAO",
        "label": "numProposals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7134,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposalRunning",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICryptoDevs)7042": {
        "encoding": "inplace",
        "label": "contract ICryptoDevs",
        "numberOfBytes": "20"
      },
      "t_contract(IFakeNFTMarketplace)7060": {
        "encoding": "inplace",
        "label": "contract IFakeNFTMarketplace",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)7125_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)7125_storage"
      },
      "t_struct(Proposal)7125_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposal",
        "members": [
          {
            "astId": 7112,
            "contract": "contracts/DAO.sol:DAO",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7114,
            "contract": "contracts/DAO.sol:DAO",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7116,
            "contract": "contracts/DAO.sol:DAO",
            "label": "yayVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7118,
            "contract": "contracts/DAO.sol:DAO",
            "label": "nayVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7120,
            "contract": "contracts/DAO.sol:DAO",
            "label": "executed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 7124,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}